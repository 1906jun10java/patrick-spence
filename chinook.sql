--SQL LAB DUE 2019-08-07 YYYY-MM-DD 17:00:00 HR24:MM:SS
--2.1 SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE
WHERE LASTNAME='KING';
SELECT * FROM EMPLOYEE 
WHERE FIRSTNAME='ANDREW';

--2.2 ORDER BY
SELECT * 
FROM ALBUM
ORDER BY ALBUMID DESC;
SELECT  FIRSTNAME, CITY
FROM CUSTOMER
ORDER BY CITY ASC;

--2.3 INSERT
INSERT INTO GENRE VALUES(26, 'INDIE ROCK');
INSERT INTO GENRE(GENREID, NAME)
VALUES (27, 'MOVIE SOUNDTRACK');
--ERRORS
INSERT INTO EMPLOYEE VALUES(9, 'SPENCE', 'PATRICK', 'SALES SUPPORT AGENT', 1, TO_DATE('1988-09-13 00:00:00',  'YYYY-MM-DD HH24:MIlSS'), TO_DATE('2019-07-07 00:00:00','YYYY-MM-DD HR24:MI:SS'), '1234 MEMORY LANE', 'FORT LAUDERDALE', 'UNITED STATES','33312', '+1 (954) 253-4612', '+1 (954) 216-4532', 'CRISPYCR3AM2003@GMAIL.COM');
INSERT INTO EMPLOYEE VALUES(10, 'GONZALES', 'JESSIE', 'SALES SUPPORT AGENT', 1, TO_DATE('1994-27-01 00:00:00', 'YYYY-MM-DD HH24:MIlSS'), TO_DATE('2019-07-08 00:00:00','YYYY-MM-DD HR24:MI:SS'), '1915 SW 5TH LANE', 'FORT LAUDERDALE', 'UNITED STATES','33312', '+1 (609) 339-0819', '+1 (609) 918- 0933', 'YGONZALES27@GMAIL.COM');
--ERRORS
INSERT INTO CUSTOMER (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (60, 'Luís', 'HAMMON', 'RADIO CITY MUSIC HALL', 'SOMEWHERE IN NEW YORK', 'NEW YORK', 'NY', 'UNITED STATES', '12299-000', '+1 (123) 456-7890', '+1 (987) 654-3210', 'luisHAMMON@GMAIL.com', 3); 
INSERT INTO CUSTOMER (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (61, 'BRIT', 'SHULER', 'DISNEY', 'SOMEWHERE IN ORLANDO', 'KISSISSMEE', 'FL', 'UNITED STATE', '57897-000', '+1 (407) 789-4561 ', '+1 (407) 231- 0456', 'BRITSHU123.com', 4);

--2.4 UPDATE
UPDATE CUSTOMER
SET FIRSTNAME='ROBERT', LASTNAME='WALTER'
WHERE CUSTOMERID = '32';
UPDATE ARTIST
SET NAME= 'CCR'
WHERE ARTISTID = '76';

--2.5 LIKE any addresses that start with a T
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 20;
SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN TO_DATE('2003-6-1 00:00:00','yyyy-mm-dd hh24:mi:ss') AND TO_DATE('2004-3-1 00:00:00', 'yyyy-mm-dd hh24:mi:ss');

--2.7 DELETE
DELETE FROM CUSTOMER WHERE CUSTOMERID= '32';
--CONSTRAINT IS THE CUSTOMERID 

--3 FUNCTIONS
--3.1 SYSTEM DEFINED FUNCTIONS
--CURRENT TIME
SELECT CONVERT (TIME, SYSDATETIME());
--RETURN THE LENGTH OF NAME IN STRING
--ERROR
SELECT NAME, CHAR_LENGTH(MEDIATYPE) AS LENGTHOFNAME
FROM MEDIATYPE;

--3.2 AGGRATATE FUNCTIONS
--AVERAGE TOTAL
SELECT AVG(TOTAL)
FROM INVOICE;
--RETURNS EXPENSIVE TRACK
SELECT UNITPRICE
FROM TRACK
HAVING COUNT(UNITPRICE) > .99; 

--3.3 SCALAR FUNCTION AVG
SELECT AVG(UNITPRICE)
FROM INVOICELINE;
--3.4 RETURN TOTAL VALUE FUNCTION
SELECT * 
FROM EMPLOYEE
WHERE BIRTHDATE >= '1968-1-1'; 

--4.0 STORED PROCEDURES
--4.1 BASIC STORED PROCEDURE
CREATE PROCEDURE EMPLOYEEFILE
AS
SELECT LASTNAME, FIRSTNAME FROM EMPLOYEE
GO;
--4.2 PROCEDURE INPUT PARAMETERS
--4.3 OUTPUT PROCEDUTRE
CREATE PROCEDURE EMPLOYEEFILEA @FirstName VARCHAR2(40) NOT NULL, @COMPANY VARCHAR2(80)
AS 
SELECT * CUSTOMER WHERE FIRSTNAME='LUIS' AND COMPANY= 'Embraer - Empresa Brasileira de Aeronáutica S.A.'
GO;

--5.0 Transactions
DELETE FROM INVOICE WHERE INVOICEID = 412;
COMMIT;

--6.0 TRIGGERS
--AFTER INSERT
DELIMITER $$
CREATE TRIGGER TRIGGER_EMPLOYEE
AFTER INSERT
ON EMPLOYEE
FOR EACH ROW BEGIN
INSERT INTO EMPLOYEE VALUES ('NEW EMPLOYEE HAS BEEN ADDED');
END$$
DELIMITER; 

--AFTER UPDATE
DELIMITER$$
CREATE TRIGGER TRIGGER_ALBUM
AFTER UPDATE
ON ALBUM
FOR EACH ROW BEGIN
INSERT INTO ALBUM VALUES ('NEW ALBUM HAS BEEN ADDED');     
END$$
DELIMITER;

--AFTER DELETE
DELIMITER$$
CREATE TRIGGER TRIGGER_DELETE
AFTER DELETE
ON CUSTOMER
FOR EACH ROW BEGIN
INSERT INTO CUSTOMER VALUES ('CUSTOMER WAS FIRED');
END$$
DELIMITER;

--7.0 JOINS
--INNDER JOINS
SELECT INVOICE.CUSTOMERID, CUSTOMER.CUSTOMERNAME
FROM INVOICE
INNER JOIN CUSTOMER ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
--OUTER JOINS (LEFT)
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER
LEFT JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.INVOICEID; 
--RIGHT JOINS
SELECT ARTIST.NAME, ARTIST.ARTISTID, ALBUM.TITLE, ALBUM.ARTISTID
FROM ARTIST
RIGHT JOIN ALBUM ON ARTIST.ARTISTID= ALBUM.ARTISTID;
--CROSS JOIN
SELECT ALBUM.TITLE, ALBUM.ARTISTID, ARTIST.NAME, ARTIST.ARTISTED
FROM ALBUM
CROSS JOINS ARTIST;
--SELF JOIN